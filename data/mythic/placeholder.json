{
    "caster.damage": {
        "description": "Returns the caster's Attack_Damage attribute value"
    },
    "caster.display": {
        "description": "Returns the caster's displayed name"
    },
    "caster.mythic_type": {
        "description": "Returns the caster's internal mob type"
    },
    "caster.type": {
        "description": "Returns the internal id of a MythicMob or the entity name otherwise"
    },
    "caster.type.name": {
        "description": "Returns the display name of a MythicMob or the entity name otherwise"
    },
    "caster.uuid": {
        "description": "Returns the UUID of the caster"
    },
    "caster.level": {
        "description": "Returns the level of the caster"
    },
    "caster.name": {
        "description": "Returns the name of the caster"
    },
    "caster.hp": {
        "description": "Returns current hp of the caster"
    },
    "caster.mhp": {
        "description": "Returns the max hp of the caster"
    },
    "caster.php": {
        "description": "Returns the percent hp of the caster"
    },
    "caster.thp": {
        "description": "Returns the full number hp of the caster"
    },
    "caster.tt.top": {
        "description": "Returns the name of the top threat holder of the caster"
    },
    "caster.l.w": {
        "description": "Returns the world name the caster is in"
    },
    "caster.l.x": {
        "description": "Returns the X coordinate of the caster"
    },
    "caster.l.x.{Float}": {
        "description": "Returns the X coordinate of the caster +- random number between {Float}"
    },
    "caster.l.x.double": {
        "description": "Returns the precise X coordinate of the caster"
    },
    "caster.l.y": {
        "description": "Returns the Y coordinate of the caster"
    },
    "caster.l.y.{Float}": {
        "description": "Returns the Y coordinate of the caster +- random number between {Float}"
    },
    "caster.l.y.double": {
        "description": "Returns the precise Y coordinate of the caster"
    },
    "caster.l.z": {
        "description": "Returns the Z coordinate of the caster"
    },
    "caster.l.z.{Float}": {
        "description": "Returns the Z coordinate of the caster +- random number between {Float}"
    },
    "caster.l.z.double": {
        "description": "Returns the precise Z coordinate of the caster"
    },
    "caster.l.yaw": {
        "description": "Returns the yaw of the caster"
    },
    "caster.l.pitch": {
        "description": "Returns the pitch of the caster"
    },
    "caster.stance": {
        "description": "Returns the current stance of the caster"
    },
    "caster.stat.{Stat}": {
        "description": "Returns the value of the specified {Stat} on the caster"
    },
    "caster.heldenchantlevel.{Integer}": {
        "description": "Returns the enchant level of specified {Integer} enchant"
    },
    "caster.skill.{Metaskill}.cooldown": {
        "description": "Returns the current cooldown of the give skill as a float number"
    },
    "caster.raytrace.{Float}": {
        "description": "Returns the name of the block being looked at by the caster if within {Float} range, if {Float} is specified. If only <caster.raytrace> is used, then the range defaults to `4.5`. If no block is found, `AIR` is returned."
    },
    "caster.children.size": {
        "description": "Returns the number of children this entity has"
    },
    "caster.attack_cooldown": {
        "description": "Returns the attack cooldown of the player's equipped item. The value will be a float between 0 (maximum cooldown for the item) and 1 (no cooldown)"
    },
    "caster.var.{VariableName}": {
        "description": "Returns the value of the variable {VariableName} on the variable registry of the caster of the mechanic"
    },
    "target.var.{VariableName}": {
        "description": "Returns the value of the variable {VariableName} on the variable registry of the target of the mechanic"
    },
    "world.var.{VariableName}": {
        "description": "Returns the value of the variable {VariableName} on the variable registry of the world the mechanic is used in"
    },
    "global.var.{VariableName}": {
        "description": "Returns the value of the variable {VariableName} on the variable registry of the whole server"
    },
    "skill.var.{VariableName}": {
        "description": "Returns the value of the variable {VariableName} on the current [skill tree](https://git.lumine.io/mythiccraft/MythicMobs/-/wikis/Skills/SkillTrees)"
    },
    "skill.var.damage-amount": {
        "description": "Returns the amount of damage taken or done"
    },
    "skill.var.damage-type": {
        "description": "Returns the type of damage taken or done, if any"
    },
    "skill.var.damage-cause": {
        "description": "Returns the cause of damage taken/done"
    },
    "skill.var.aura-name": {
        "description": "Returns the name of the aura"
    },
    "skill.var.aura-type": {
        "description": "Returns the type of the aura"
    },
    "skill.var.aura-charges": {
        "description": "Returns the amount of charges the aura has left"
    },
    "skill.var.aura-duration": {
        "description": "Returns the remaining duration of the aura"
    },
    "skill.var.aura-duration-millis": {
        "description": "Returns the remaining duration of the aura, in milliseconds"
    },
    "skill.var.aura-stacks": {
        "description": "Returns the amount of stacks the aura has left"
    },
    "skill.var.input": {
        "description": "Returns the chat input"
    },
    "skill.targets": {
        "description": "Returns the amount of inherited targets"
    },
    "skill.var.interval": {
        "description": "Returns the current iteration"
    },
    "skill.var.itr": {
        "description": "Returns the current iteration"
    },
    "skill.var.volume": {
        "description": "Returns a float value between 1 and 15 representing the intensity of the sound. Directly proportional to the distance (the further away the source, the higher this value)"
    },
    "skill.var.sound-type": {
        "description": "Returns the type of the sound"
    },
    "skill.var.hit-block-type": {
        "description": "Returns the block that was hit, or AIR if none"
    },
    "skill.var.bow-tension": {
        "description": "Returns the force with which the projectile has been shot"
    },
    "target.uuid": {
        "description": "Returns the UUID of the target"
    },
    "target.name": {
        "description": "Returns the name of the target"
    },
    "target.hp": {
        "description": "Returns current hp of the target"
    },
    "target.mhp": {
        "description": "Returns the max hp of the target"
    },
    "target.php": {
        "description": "Returns the percent hp of the target"
    },
    "target.thp": {
        "description": "Returns the full number hp of the target"
    },
    "target.threat": {
        "description": "Returns the threat level of the target"
    },
    "target.l.w": {
        "description": "Returns the world name the target is in"
    },
    "target.l.x": {
        "description": "Returns the X coordinate of the target"
    },
    "target.l.x.{Float}": {
        "description": "Returns the X coordinate of the target +- random number between {Float}"
    },
    "target.l.y": {
        "description": "Returns the Y coordinate of the target"
    },
    "target.l.y.{Float}": {
        "description": "Returns the Y coordinate of the target +- random number between {Float}"
    },
    "target.l.z": {
        "description": "Returns the Z coordinate of the target"
    },
    "target.l.z.{Float}": {
        "description": "Returns the Z coordinate of the target +- random number between {Float}"
    },
    "target.l.yaw": {
        "description": "Returns the yaw of the target"
    },
    "target.l.pitch": {
        "description": "Returns the pitch of the target"
    },
    "target.level": {
        "description": "Returns the level of the target"
    },
    "target.block.type": {
        "description": "Returns the block type of the target"
    },
    "target.block.data": {
        "description": "Returns the block data of the target block"
    },
    "target.entity_type": {
        "description": "Returns the entity type of the target"
    },
    "target.item.type": {
        "description": "Returns the type of the targeted item entity"
    },
    "target.held.item": {
        "description": "Returns the item held by the target"
    },
    "target.itemstack_amount": {
        "description": "Returns the amount of item entities on the ground"
    },
    "target.stat.{StatName}": {
        "description": "Returns the value of the specified stat on the target"
    },
    "target.raytrace.{Float}": {
        "description": "Returns the name of the block being looked at by the target if within {Float} range, if {Float} is specified. If only <target.raytrace> is used, then the range defaults to `4.5`. If no block is found, `AIR` is returned."
    },
    "target.fovoffset{rotation=0;absolute=true}": {
        "description": "Returns the angular offset (in degrees) between the direction the caster is looking and the direction from the caster to the target entity. This offset can be used to determine how far the target is from the caster's center of view"
    },
    "target.distance": {
        "description": "Return the distance between the caster and the mechanic's target. If the target cannot be found in the caster's world, returns the maximum double value"
    },
    "trigger.uuid": {
        "description": "Returns the UUID of the entity triggering the skill"
    },
    "trigger.name": {
        "description": "Returns the name of the entity triggering the skill"
    },
    "trigger.hp": {
        "description": "Returns the current hp of the entity triggering the skill"
    },
    "trigger.mhp": {
        "description": "Returns the max hp of the entity triggering the skill"
    },
    "trigger.threat": {
        "description": "Returns the threat level of the entity triggering the skill"
    },
    "trigger.l.w": {
        "description": "Returns the world name of the entity triggering the skill"
    },
    "trigger.l.x": {
        "description": "Returns the X coordinate of the entity triggering the skill"
    },
    "trigger.l.x.{Float}": {
        "description": "Returns the X coordinate of the entity triggering the skill +- random number between {Float}"
    },
    "trigger.l.y": {
        "description": "Returns the Y coordinate of the entity triggering the skill"
    },
    "trigger.l.y.{Float}": {
        "description": "Returns the Y coordinate of the entity triggering the skill +- random number between {Float}"
    },
    "trigger.l.z": {
        "description": "Returns the Z coordinate of the entity triggering the skill"
    },
    "trigger.l.z.{Float}": {
        "description": "Returns the Z coordinate of the entity triggering the skill +- random number between {Float}"
    },
    "trigger.l.yaw": {
        "description": "Returns the yaw of the trigger"
    },
    "trigger.l.pitch": {
        "description": "Returns the pitch of the trigger"
    },
    "trigger.held.item": {
        "description": "Returns the item held by the trigger"
    },
    "trigger.raytrace": {
        "description": "Returns the name of the block being looked at by the trigger (4.5 blocks of range)"
    },
    "trigger.item.amount": {
        "description": "Returns the amount of the item the trigger is holding"
    },
    "trigger.item.type": {
        "description": "Returns the type of the item the trigger is holding"
    },
    "trigger.item.model": {
        "description": "Returns the model of the item the trigger is holding"
    },
    "trigger.stat.{Stat}": {
        "description": "Returns the value of the specified stat on the trigger"
    },
    "trigger.raytrace.{Float}": {
        "description": "Returns the name of the block being looked at by the trigger if within {Float} range, if # is specified. If only <trigger.raytrace> is used, then the range defaults to `4.5`. If no block is found, `AIR` is returned."
    },
    "trigger.distance": {
        "description": "Return the distance between the caster and the skilltree's trigger. If the trigger cannot be found in the caster's world, returns the maximum double value"
    },
    "drop.amount": {
        "description": "Returns the amount dropped while used in specific drop types"
    },
    "drops.xp": {
        "description": "Returns the xp dropped via specific drop types"
    },
    "drops.money": {
        "description": "Returns the money dropped through the vault plug-in"
    },
    "random.#to#": {
        "description": "Returns a random integer in the specified range"
    },
    "random.float.#to#": {
        "description": "Returns a random float number in the specified range"
    },
    "utils.epoch": {
        "description": "Returns the current epoch"
    },
    "utils.epoch.millis": {
        "description": "Returns the amount of milliseconds of the current epoch"
    },
    "utils.epoch.ticks": {
        "description": "Returns the current epoch, converted in ticks. Assumes that the server always maintains 20 ticks per second. Accounts for milliseconds. <br>While unorthodox, since time within Minecraft (and by extension Mythic) is measured in ticks, this may be of some help streamlining some processes where converting the normal epoch time to accomodate for ticks may be burdensome if done at scale"
    },
    "item.amount": {
        "description": "Returns the amount of the item that triggered the skill"
    },
    "mythicitem.{MythicItem}.material": {
        "description": "Returns the material of the specified mythic item"
    },
    "mythicitem.{MythicItem}.model": {
        "description": "Returns the custommodeldata of the specified mythic item"
    },
    "mythicitem.{MythicItem}.display": {
        "description": "Returns the display name of the specified mythic item"
    },
    "caster.score.{Objective}": {
        "description": "Returns the score of the caster from \"{Objective}\""
    },
    "target.score.{Objective}": {
        "description": "Returns the targeters score from \"{Objective}\""
    },
    "trigger.score.{Objective}": {
        "description": "Returns the score of the trigger from \"{Objective}\""
    },
    "global.score.{Objective}": {
        "description": "Returns the score of fake player: \\_\\_GLOBAL\\_\\_ score from \"{Objective}\""
    },
    "score.objective.player": {
        "description": "Returns the score of the defined player from \"objective\""
    },
    "score.objective.dummyname": {
        "description": "Returns the score of \"dummyname\" (fake player) from \"objective\""
    },
    "caster.item.nbt.KEY": {
        "description": "If no slot is specified, this checks the caster's item that called the skill."
    },
    "caster.item.hand.nbt.KEY": {
        "description": "Returns the specified NBT key of the caster's hand item."
    },
    "caster.item.offhand.nbt.KEY": {
        "description": "Returns the specified NBT key of the caster's offhand item."
    },
    "caster.item.head.nbt.KEY": {
        "description": "Returns the specified NBT key of the caster's head item."
    },
    "caster.item.chest.nbt.KEY": {
        "description": "Returns the specified NBT key of the caster's head item."
    },
    "caster.item.legs.nbt.KEY": {
        "description": "Returns the specified NBT key of the caster's head item."
    },
    "caster.item.feet.nbt.KEY": {
        "description": "Returns the specified NBT key of the caster's feet item."
    },
    "skill.var.crafts": {
        "description": "Returns the amount of items crafted"
    },
    "skill.var.equip-item": {
        "description": "Returns the Itemstack of the item being used"
    },
    "skill.var.equip-slot": {
        "description": "Returns the slot of the item being used"
    },
    "skill.var.block-internalid": {
        "description": "Returns the internal name of the custom block being placed/broken, if used inside CustomBlockSkills"
    },
    "trigger.item.hand.nbt.KEY": {
        "description": "Returns the specified NBT key of the trigger's hand item."
    },
    "item.color.hex": {
        "description": "Returns the hex color of the item that called the skill"
    },
    "item.stat.display.{Stat}": {
        "description": "Returns the value of the specified stat."
    },
    "item.stat.display.{Stat}.{StatModifier}": {
        "description": "Returns the value of the specified modifier of that stat."
    },
    "font.{FontName}": {
        "description": "Returns the character associated with the custom font named `{FontName}`"
    },
    "caster.archetype.[group]": {
        "description": "Returns the caster's [archetype](/Archetypes) from the specified `group`<br>Defaults to `NONE`"
    },
    "caster.archetype.level.[group]": {
        "description": "Returns the caster's [archetype](/Archetypes) level from the specified `group`"
    },
    "caster.archetype.exp.[group]": {
        "description": "Returns the caster's [archetype](/Archetypes) experience from the specified `group`"
    },
    "caster.archetype.exp.goal.[group]": {
        "description": "Returns the caster's [archetype](/Archetypes) experience goal from the specified `group`"
    },
    "skill.var.click-type": {
        "description": "The type of the click used to interact with a [menu button](/Custom-Menus#button-skills). Returns `1` if rightclick was used, `0` otherwise"
    }
}