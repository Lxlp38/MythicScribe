{
  "name": "mythicscribe",
  "displayName": "MythicScribe",
  "version": "1.7.8-dev",
  "icon": "assets/icon128x128.png",
  "description": "Official extension for the MythicCraft suite, providing configuration support for its plugins",
  "license": "SEE LICENSE IN LICENSE.txt",
  "publisher": "Lxlp",
  "author": {
    "name": "Lxlp"
  },
  "pricing": "Free",
  "sponsor": {
    "url": "https://github.com/sponsors/Lxlp38"
  },
  "keywords": [
    "mythicmobs",
    "modelengine",
    "crucible",
    "mythicrpg"
  ],
  "repository": {
    "type": "git",
    "url": "https://github.com/Lxlp38/MythicScribe"
  },
  "engines": {
    "vscode": "^1.93.0"
  },
  "categories": [
    "Programming Languages",
    "Formatters",
    "Visualization",
    "Other"
  ],
  "preview": false,
  "qna": "marketplace",
  "activationEvents": [
    "onLanguage:yaml"
  ],
  "main": "dist/node/MythicScribe.js",
  "browser": "dist/web/MythicScribe.js",
  "contributes": {
    "configurationDefaults": {
      "[mythicscript]": {
        "editor.defaultFormatter": "Lxlp.mythicscribe",
        "editor.tabSize": 2,
        "editor.insertSpaces": true,
        "editor.acceptSuggestionOnEnter": "off"
      }
    },
    "menus": {
      "editor/context": [
        {
          "submenu": "extensionmenu",
          "when": "editorLangId == mythicscript",
          "group": "mythicscribe"
        }
      ],
      "extensionmenu": [
        {
          "command": "MythicScribe.showNodeGraph",
          "group": "nodegraph"
        },
        {
          "submenu": "tools",
          "group": "other@2"
        },
        {
          "submenu": "dataset",
          "group": "other@1"
        },
        {
          "command": "MythicScribe.openLogs",
          "group": "other@3"
        },
        {
          "command": "MythicScribe.openSettings",
          "group": "other@4"
        },
        {
          "command": "MythicScribe.putSelectionInsideInlineMetaskill",
          "group": "other.action",
          "when": "editorHasSelection && editorLangId == mythicscript"
        }
      ],
      "dataset": [
        {
          "command": "MythicScribe.addCustomDataset",
          "group": "customdataset@1"
        },
        {
          "command": "MythicScribe.removeCustomDataset",
          "group": "customdataset@2"
        },
        {
          "command": "MythicScribe.createBundleDataset",
          "group": "customdataset@3"
        },
        {
          "command": "MythicScribe.loadDatasets",
          "group": "dataset"
        }
      ],
      "tools": [
        {
          "command": "MythicScribe.external.aurafx",
          "group": "tools"
        },
        {
          "command": "MythicScribe.external.minecraftsounds",
          "group": "tools"
        }
      ]
    },
    "submenus": [
      {
        "id": "extensionmenu",
        "label": "MythicScribe"
      },
      {
        "id": "dataset",
        "label": "Datasets"
      },
      {
        "id": "tools",
        "label": "Tools"
      }
    ],
    "commands": [
      {
        "command": "MythicScribe.addCustomDataset",
        "title": "Add Custom Dataset"
      },
      {
        "command": "MythicScribe.removeCustomDataset",
        "title": "Remove Custom Dataset"
      },
      {
        "command": "MythicScribe.createBundleDataset",
        "title": "Create Bundle Dataset"
      },
      {
        "command": "MythicScribe.openLogs",
        "title": "Open Logs"
      },
      {
        "command": "MythicScribe.openSettings",
        "title": "Open Settings"
      },
      {
        "command": "MythicScribe.loadDatasets",
        "title": "Reload Datasets"
      },
      {
        "command": "MythicScribe.showNodeGraph",
        "title": "Mythic Node Graph"
      },
      {
        "command": "MythicScribe.putSelectionInsideInlineMetaskill",
        "title": "Put Selection Inside Inline Metaskill"
      },
      {
        "command": "MythicScribe.external.aurafx",
        "title": "AuraFX (by Sleepsweety)",
        "shortTitle": "AuraFX"
      },
      {
        "command": "MythicScribe.external.minecraftsounds",
        "title": "MinecraftSounds (by Morose)",
        "shortTitle": "MinecraftSounds"
      },
      {
        "command": "MythicScribe.external.minecraftsounds.playback",
        "title": "Play Sound on MinecraftSounds"
      },
      {
        "command": "MythicScribe.createMetaskillDocumentation",
        "title": "Create the documentation for a Metaskill"
      }
    ],
    "languages": [
      {
        "id": "mythicscript",
        "configuration": "./language-configuration.json",
        "aliases": [
          "MythicScript"
        ],
        "displayName": "MythicScript",
        "icon": {
          "light": "./assets/icon128x128.png",
          "dark": "./assets/icon128x128.png"
        }
      }
    ],
    "grammars": [
      {
        "language": "mythicscript",
        "scopeName": "source.mythicscript",
        "path": "./syntaxes/mythicscript.tmLanguage.json"
      }
    ],
    "configuration": {
      "type": "object",
      "title": "MythicScribe",
      "properties": {
        "MythicScribe.alwaysEnabled": {
          "title": "Always Enabled",
          "type": "boolean",
          "default": false,
          "description": "Enable MythicScribe's functionalities in all files."
        },
        "MythicScribe.enableMythicScriptSyntax": {
          "title": "Enable MythicScript Syntax",
          "type": "boolean",
          "default": true,
          "description": "Whether the extension should automatically convert the document types from yaml to MythicScript if it's recognized as a MythicMobs file. This does not change the file or its extension in any way, while also enabling mythic-specific syntax highlighting."
        },
        "MythicScribe.minecraftVersion": {
          "title": "Minecraft Version",
          "type": "string",
          "enum": [
            "latest",
            "1.21.10",
            "1.21.9",
            "1.21.8",
            "1.21.7",
            "1.21.6",
            "1.21.5",
            "1.21.4",
            "1.21.3",
            "1.21.1",
            "1.20.6",
            "1.20.5",
            "1.20.4",
            "1.19.4"
          ],
          "default": "latest",
          "description": "The version of Minecraft that the extension should use for autocompletions."
        },
        "MythicScribe.datasetSource": {
          "title": "Dataset",
          "type": "string",
          "enum": [
            "Local",
            "GitHub"
          ],
          "default": "Local",
          "description": "Select what dataset to use: `GitHub` fetches the latest datasets from the repository, while `Local` uses the native one that came bundled with the extension. The affected datasets are only those for mechanics, targeters, triggers and conditions"
        },
        "MythicScribe.enableShortcuts": {
          "title": "Enable Shortcuts",
          "type": "boolean",
          "default": "true",
          "description": "Enable text shortcuts for MythicMobs files."
        },
        "MythicScribe.enableEmptyBracketsAutomaticRemoval": {
          "title": "Enable Empty Brackets Automatic Removal",
          "type": "boolean",
          "default": true,
          "description": "Enable the removal of empty curly brackets `{}` by moving the cursor past them."
        },
        "MythicScribe.enableFileSpecificSuggestions": {
          "deprecationMessage": "This setting is deprecated. When the setting `editor.acceptSuggestionOnEnter` is set to anything other than `off`, file specific suggestions will be automatically disabled.",
          "title": "Enable File Specific Suggestions",
          "type": "boolean",
          "default": true,
          "description": "Whether file specific suggestions (metaskill files, mob files) should be shown."
        },
        "MythicScribe.attributeAliasUsedInCompletions": {
          "title": "Attribute Alias Used in Completions",
          "type": "string",
          "enum": [
            "main",
            "shorter",
            "longer"
          ],
          "default": "main",
          "description": "Which attribute alias should be used in autocompletions."
        },
        "MythicScribe.customDatasets": {
          "type": "array",
          "description": "Load a Custom Dataset from a Local File or a Link.",
          "items": {
            "type": "object",
            "properties": {
              "elementType": {
                "type": "string",
                "enum": [
                  "Bundle",
                  "Enum",
                  "Mechanic",
                  "Condition",
                  "Trigger",
                  "Targeter",
                  "AIGoal",
                  "AITarget"
                ],
                "description": "The type of element to associate."
              },
              "source": {
                "type": "string",
                "enum": [
                  "File",
                  "Link"
                ],
                "description": "The source of the dataset."
              },
              "path": {
                "type": "string",
                "description": "The local file path or URL to associate with the element type."
              }
            },
            "required": [
              "elementType",
              "source",
              "path"
            ]
          },
          "default": []
        },
        "MythicScribe.enabledPlugins": {
          "additionalProperties": {
            "type": "boolean"
          },
          "default": {
            "MythicMobs": true,
            "ModelEngine": true,
            "MythicCrucible": true,
            "MythicRPG": true,
            "MythicAchievements": true
          },
          "description": "Enable / Disable specific plugins' datasets",
          "title": "Enabled Plugins",
          "type": "object"
        },
        "MythicScribe.fileRegex": {
          "type": "object",
          "properties": {
            "MythicMobs": {
              "type": "string",
              "description": "Regex to identify a generic MythicMobs files."
            },
            "Mob": {
              "type": "string",
              "description": "Regex to identify Mob files."
            },
            "Item": {
              "type": "string",
              "description": "Regex to identify Item files."
            },
            "Metaskill": {
              "type": "string",
              "description": "Regex to identify Metaskill files."
            },
            "Droptable": {
              "type": "string",
              "description": "Regex to identify Droptable files."
            },
            "Stat": {
              "type": "string",
              "description": "Regex to identify Stat files."
            },
            "Pin": {
              "type": "string",
              "description": "Regex to identify Pin files."
            },
            "Placeholder": {
              "type": "string",
              "description": "Regex to identify Custom Placeholders files."
            },
            "RandomSpawn": {
              "type": "string",
              "description": "Regex to identify RandomSpawn files."
            },
            "EquipmentSet": {
              "type": "string",
              "description": "Regex to identify Equipment Set files."
            },
            "Archetype": {
              "type": "string",
              "description": "Regex to identify Archetype files."
            },
            "Reagent": {
              "type": "string",
              "description": "Regex to identify Reagent files."
            },
            "Menu": {
              "type": "string",
              "description": "Regex to identify Menu files."
            },
            "Achievement": {
              "type": "string",
              "description": "Regex to identify Achievement files."
            }
          },
          "default": {
            "MythicMobs": "[\\\\\\/][Mm]ythic[Mm]obs[\\\\\\/]",
            "Mob": "[\\\\\\/][Mm]obs[\\\\\\/]",
            "Item": "[\\\\\\/][Ii]tems[\\\\\\/]",
            "Metaskill": "[\\\\\\/][Ss]kills[\\\\\\/]",
            "Droptable": "[\\\\\\/][Dd]rop[Tt]ables[\\\\\\/]",
            "Stat": "[\\\\\\/]stats.((yaml)|(yml)|(txt))",
            "Pin": "[\\\\\\/]pins.((yaml)|(yml)|(txt))",
            "Placeholder": "[\\\\\\/]placeholders.((yaml)|(yml)|(txt))",
            "RandomSpawn": "[\\\\\\/][Rr]andom[Ss]pawns[\\\\\\/]",
            "EquipmentSet": "[\\\\\\/]equipment-sets.((yaml)|(yml)|(txt))",
            "Archetype": "[\\\\\\/][Aa]rchetypes[\\\\\\/]",
            "Reagent": "[\\\\\\/]reagents.((yaml)|(yml)|(txt))",
            "Menu": "[\\\\\\/][Mm]enus[\\\\\\/]",
            "Achievement": "[\\\\\\/][Aa]chievements[\\\\\\/]"
          },
          "additionalProperties": false,
          "description": "Regexes used against each document's file path: if it matches, the document will be considered as being a specific type of file, enabling specific functionalities.",
          "title": "File Type Recognition Regexes"
        },
        "MythicScribe.logLevel": {
          "title": "Log Level",
          "type": "string",
          "enum": [
            "error",
            "warn",
            "info",
            "debug",
            "trace"
          ],
          "default": "debug",
          "description": "The level of logging to use for MythicScribe."
        },
        "MythicScribe.fileParsingPolicy": {
          "title": "File Parser Policy",
          "description": "The policies to use when parsing files.",
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "parseOnStartup": {
              "title": "Parse on Startup",
              "type": "boolean",
              "description": "Whether to parse all files on startup or when the datasets are reloaded."
            },
            "parseOnSave": {
              "title": "Parse on Save",
              "type": "boolean",
              "description": "Whether to parse the current file on save."
            },
            "parseOnModification": {
              "title": "Parse on Modification",
              "type": "boolean",
              "description": "Whether to parse the current file on modification."
            },
            "parsingGlobPattern": {
              "title": "Parsing Glob Pattern",
              "type": "string",
              "description": "The glob pattern to use to identify files to parse."
            },
            "excludeGlobPattern": {
              "title": "Exclude Glob Pattern",
              "type": "string",
              "description": "The glob pattern to use to exclude files from parsing."
            },
            "parallelParsingLimit": {
              "title": "Parallel Parsing Limit",
              "type": "number",
              "minimum": 1,
              "description": "The maximum number of files to parse in parallel on startup or after the datasets are reloaded. Will decrease performance if set too high when a *very* large amount of files is present."
            }
          },
          "default": {
            "parseOnStartup": true,
            "parseOnSave": true,
            "parseOnModification": false,
            "parsingGlobPattern": "**/*.{yaml,yml}",
            "excludeGlobPattern": "",
            "parallelParsingLimit": 10
          }
        },
        "MythicScribe.diagnosticsPolicy": {
          "title": "Diagnostics Policy",
          "description": "The policies to use when showing diagnostics.",
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "enabled": {
              "title": "Enable Diagnostics",
              "type": "boolean",
              "default": false,
              "description": "Whether to enable diagnostics."
            }
          },
          "default": {
            "enabled": false
          }
        },
        "MythicScribe.colorProviderOptions": {
          "title": "Color Provider Options",
          "description": "The options to use for the color provider.",
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "alwaysEnabled": {
              "title": "Always Enabled",
              "type": "boolean",
              "description": "Whether the color provider should always be enabled after the extension's activation, even when not in a MythicMobs file."
            },
            "backgroundColor": {
              "title": "Background Color",
              "type": "string",
              "enum": [
                "same",
                "inverted",
                "none"
              ],
              "description": "The background color to use for the color provider."
            },
            "charColor": {
              "title": "Character Color",
              "type": "string",
              "enum": [
                "same",
                "inverted",
                "none"
              ],
              "description": "The character color to use for the color provider."
            }
          },
          "default": {
            "alwaysEnabled": true,
            "backgroundColor": "same",
            "charColor": "none"
          }
        },
        "MythicScribe.nodeGraph": {
          "title": "Node Graph Options",
          "description": "Options for the Node Graph feature.",
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "wheelSensitivity": {
              "title": "Wheel Sensitivity",
              "type": "number",
              "default": 2,
              "description": "The sensitivity of the mouse wheel for zooming in the Node Graph."
            }
          },
          "default": {
            "wheelSensitivity": 2
          }
        },
        "MythicScribe.allowExternalTools": {
          "title": "Allow External Tools",
          "type": "boolean",
          "default": false,
          "description": "Whether to allow external tools to be used from within MythicScribe, without being redirected to a browser."
        },
        "MythicScribe.decorationOptions": {
          "title": "Decoration Options",
          "description": "Options for various decorations shown in MythicScript files",
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "delayTracking": {
              "title": "Delay Tracking",
              "type": "boolean",
              "default": true,
              "description": "Show a little decoration to the right of `delay` mechanics inside of Metaskill files, with the accumulated delay since the start of the Metaskill"
            },
            "soundPlayback": {
              "title": "Sound Playback",
              "type": "boolean",
              "default": true,
              "description": "Show prompts to play sounds on minecraftsounds.com for the sound mechanics in the metaskill"
            },
            "specificSoundPlayback": {
              "title": "Specific Sound Playback",
              "type": "boolean",
              "default": false,
              "description": "Show prompts to play sounds on minecraftsounds.com for the specific sound mechanic"
            },
            "createMetaskillDocumentation": {
              "title": "Create Metaskill Documentation",
              "type": "boolean",
              "default": true,
              "description": "Show a prompt to create the documentation for metaskills based on their skill parameters"
            }
          },
          "default": {
            "delayTracking": true,
            "soundPlayback": true,
            "specificSoundPlayback": false,
            "createMetaskillDocumentation": true
          }
        }
      }
    }
  },
  "scripts": {
    "compile": "npm run check-types && node esbuild.js",
    "check-types": "tsc --noEmit",
    "w": "npm-run-all -p watch:*",
    "watch:clear": "nodemon --quiet --watch src --ext ts --exec cls",
    "watch:esbuild": "nodemon --quiet --watch src --ext ts --exec node esbuild.js",
    "watch:tsc": "nodemon --quiet --watch src --ext ts --exec tsc --noEmit",
    "watch:lint": "nodemon --quiet --watch src --ext ts --exec eslint src/ --fix --cache",
    "lint": "eslint src/ --fix --cache && echo 'Linting done.'",
    "vscode:prepublish": "npm run package",
    "package": "npm run check-types && node esbuild.js --production",
    "build": "npm run compile",
    "buildtag": "npm run scripts && npx @vscode/vsce package",
    "pretest": "npm run compile",
    "test": "node ./dist/node/test/runTests.js",
    "openweb": "npm run compile && vscode-test-web --extensionPath .",
    "scripts": "npx ts-node ./scripts/runScripts.ts"
  },
  "devDependencies": {
    "@esbuild-plugins/node-globals-polyfill": "^0.2.3",
    "@types/mocha": "^10.0.10",
    "@types/node": "20.x",
    "@types/sinon": "^17.0.3",
    "@types/vscode": "^1.93.0",
    "@typescript-eslint/eslint-plugin": "^8.19.0",
    "@typescript-eslint/parser": "^8.19.0",
    "@vscode/test-cli": "^0.0.10",
    "@vscode/test-electron": "^2.4.1",
    "@vscode/test-web": "^0.0.66",
    "@vscode/vsce": "^3.6.0",
    "esbuild": ">=0.25.0",
    "eslint": "^9.17.0",
    "eslint-config-prettier": "^9.1.0",
    "eslint-plugin-import": "^2.31.0",
    "eslint-plugin-prettier": "^5.2.1",
    "eslint-plugin-promise": "^7.2.1",
    "glob": "^11.0.1",
    "mocha": "^11.1.0",
    "nodemon": "^3.1.9",
    "npm-run-all": "^4.1.5",
    "prettier": "^3.4.2",
    "sinon": "^19.0.2",
    "typescript": "^5.6.2"
  },
  "dependencies": {
    "comment-parser": "^1.4.1",
    "cytoscape": "^3.31.1",
    "cytoscape-context-menus": "^4.2.1",
    "cytoscape-fcose": "^2.2.0",
    "p-limit": "^3.1.0",
    "path-browserify": "^1.0.1",
    "yaml": "^2.7.0"
  }
}