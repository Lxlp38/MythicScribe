name: Upload Dev Build and Commit Artifact

on:
  push:
    branches:
      - '*'

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Install dependencies
        run: npm ci

      - name: Package the VSCode extension (.vsix)
        run: npm run buildtag

      - name: List files after packaging
        run: ls -al

      - name: Upload .vsix as an artifact
        uses: actions/upload-artifact@v4
        with:
          name: 'mythicscribe.vsix'
          path: '*.vsix'

      - name: Update tag to latest commit
        run: |
          git tag -f dev
          git push origin -f dev  

      - name: Generate release body
        id: generate_body
        run: |
          RELEASE_BODY=$(echo -e "The latest dev build, generated from the latest commit.\n\nEach commit also generates an artifact via the associated action. So, if you want to fetch a specific version, it is also possible to fetch that instead.\n\n**Build Information:**\n- Commit: $GITHUB_SHA\n- Build Date: $(date +"%Y-%m-%dT%H:%M:%SZ")")
          echo "release_body<<EOF" >> $GITHUB_OUTPUT
          echo "$RELEASE_BODY" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Conditionally delete dev release if not latest
        run: |
          LATEST_RELEASE=$(gh release list --limit 1 --json tagName -q '.[0].tagName')
          echo "Latest release tag: $LATEST_RELEASE"
          if [ "$LATEST_RELEASE" != "dev" ]; then
            echo "Dev release is not the latest, deleting it."
            gh release delete dev --yes || echo "No dev release found, continuing..."
          else
            echo "Dev release is the latest release, not deleting it."
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Rename .vsix file with commit number
        run: |
          FILE=$(ls *.vsix | head -n 1)
          echo "Found .vsix file: $FILE"
          COMMIT_NUMBER=$(git rev-list --count HEAD)
          BASENAME="${FILE%.*}"
          EXT="${FILE##*.}"
          NEWFILE="${BASENAME}-${COMMIT_NUMBER}.${EXT}"
          echo "Renaming file to: $NEWFILE"
          cp "$FILE" '!mythicscribe-latest.vsix'
          mv "$FILE" "$NEWFILE"
  
      - name: Update Release
        uses: softprops/action-gh-release@c95fe1489396fe8a9eb87c0abf8aa5b2ef267fda
        with:
          tag_name: dev
          name: Dev Build
          body: ${{ steps.generate_body.outputs.release_body }}
          generate_release_notes: true
          prerelease: true
          files: |
            *.vsix
          token: ${{ secrets.GITHUB_TOKEN }}
    